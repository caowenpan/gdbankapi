
package com.mychery.mespulgin.boot.clientg397;

/**
 * Please modify this class to meet your needs
 * This class is not complete
 */


import com.mychery.mespulgin.boot.entity.g397gdyh.In;
import com.mychery.mespulgin.boot.entity.g397gdyh.LIST_OBJ;
import com.mychery.mespulgin.boot.util.DateUtil;
import org.apache.cxf.endpoint.Client;
import org.apache.cxf.frontend.ClientProxy;
import org.apache.cxf.transport.http.HTTPConduit;
import org.apache.cxf.transports.http.configuration.HTTPClientPolicy;
import org.springframework.stereotype.Component;

import javax.xml.namespace.QName;
import java.math.BigDecimal;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;

/**
 * This class was generated by Apache CXF 3.3.5
 * 2020-04-21T13:07:50.504+08:00
 * Generated source version: 3.3.5
 *
 */

@Component
public final class SZEAIIMPCCCMAGDSoap_SZEAIIMPCCCMAGDSoap1_Client {

    private static final QName SERVICE_NAME = new QName("urn:schemas-iwaysoftware-com:iwse", "S_Z_EAI_IMP_CCCMA_GD");

    public SZEAIIMPCCCMAGDSoap_SZEAIIMPCCCMAGDSoap1_Client() {
    }

    /**
     * 程序模拟数据发送请求到SAP（通过for 循环控制请求数据条目数）
     * @return OZEAIIMPCCCMAGDResponse
     */
    public OZEAIIMPCCCMAGDResponse getResponseG397(){
        URL wsdlURL = SZEAIIMPCCCMAGD.WSDL_LOCATION;
        OZEAIIMPCCCMAGDResponse  _oZEAIIMPCCCMAGD__return = null;
        SZEAIIMPCCCMAGD ss = new SZEAIIMPCCCMAGD(wsdlURL, SERVICE_NAME);
        SZEAIIMPCCCMAGDSoap port = ss.getSZEAIIMPCCCMAGDSoap1();

        {
            System.out.println("Invoking oZEAIIMPCCCMAGD...");
            //OZEAIIMPCCCMAGD _oZEAIIMPCCCMAGD_parameters = null;
            OZEAIIMPCCCMAGD _oZEAIIMPCCCMAGD_parameters = new OZEAIIMPCCCMAGD();
            List<ZFEAICCCMHEADERA> zfeaicccmheaderaList = new ArrayList<ZFEAICCCMHEADERA>();
            for (int i = 0; i <3 ; i++) {
                ZFEAICCCMHEADERA zfeaicccmheadera = new ZFEAICCCMHEADERA();
                setZfeaicccmheadera(i,zfeaicccmheadera);
                zfeaicccmheaderaList.add(zfeaicccmheadera);
            }
            OZEAIIMPCCCMAGD.ZEAIIMPCCCMAGD zeaiimpcccmagd = new OZEAIIMPCCCMAGD.ZEAIIMPCCCMAGD();
            OZEAIIMPCCCMAGD.ZEAIIMPCCCMAGD.ITITEM ititem = new OZEAIIMPCCCMAGD.ZEAIIMPCCCMAGD.ITITEM ();
            ititem.item=zfeaicccmheaderaList;
            zeaiimpcccmagd.setITITEM(ititem);
            _oZEAIIMPCCCMAGD_parameters.setZEAIIMPCCCMAGD(zeaiimpcccmagd);
            System.out.println(_oZEAIIMPCCCMAGD_parameters);
            try {
                Client client = ClientProxy.getClient(port);
                client.getOutInterceptors().add(new AddSoapHeader());
                HTTPConduit http =(HTTPConduit) client.getConduit();
                HTTPClientPolicy httpClientPolicy = new HTTPClientPolicy();
                httpClientPolicy.setConnectionTimeout(Integer
                        .valueOf("30000"));
                httpClientPolicy.setReceiveTimeout(Integer
                        .valueOf("150000"));
                httpClientPolicy.setAllowChunking(false);
                http.setClient(httpClientPolicy);

                 _oZEAIIMPCCCMAGD__return = port.oZEAIIMPCCCMAGD(_oZEAIIMPCCCMAGD_parameters);
                System.out.println("oZEAIIMPCCCMAGD.result=" + _oZEAIIMPCCCMAGD__return.toString());


            } catch (AdapterException e) {
                System.out.println("Expected exception: AdapterException has occurred.");
                System.out.println(e.toString());
            }
            return _oZEAIIMPCCCMAGD__return;
        }
    }



    private static void setZfeaicccmheadera(Integer in, ZFEAICCCMHEADERA zfeaicccmheadera) {
        zfeaicccmheadera.setIDATE("2020-04-19");
        zfeaicccmheadera.setBANK("YH0100");
        zfeaicccmheadera.setKUNRG("KUNRG"+in.toString());
        zfeaicccmheadera.setNAME1("test");
        zfeaicccmheadera.setKLIMA(new BigDecimal(20000));
        zfeaicccmheadera.setKUSEB(new BigDecimal(18000));
        zfeaicccmheadera.setKLIMB(new BigDecimal(2000));
        zfeaicccmheadera.setKLIMC(new BigDecimal(20));
        zfeaicccmheadera.setDATAB("2020-04-25");
        zfeaicccmheadera.setDATBI("2020-05-28");
        zfeaicccmheadera.setSTATUS("01");
        zfeaicccmheadera.setAMOUNT(new BigDecimal(2000));
        zfeaicccmheadera.setAMOUNT1(new BigDecimal(2000));
        zfeaicccmheadera.setAMOUNT2(new BigDecimal(2000));
    }

    /**
     *
     * @param in
     * @param zfeaicccmheaderaList
     */
    private static void setZfeaicccmheaderaByIn(In in,List<ZFEAICCCMHEADERA> zfeaicccmheaderaList) {
        try {

            if(in !=null && in.getBody()!=null && in.getBody().getLIST_OBJ()!=null && in.getBody().getLIST_OBJ().size()>0){
                String idate = DateUtil.stringToDate(in.getBody().getDATE());
                System.out.println(idate);
                String bank = in.getBody().getBANK_CODE();
                List<LIST_OBJ> list_objList = in.getBody().getLIST_OBJ();
                for (LIST_OBJ list_obj: list_objList
                     ) {
                    ZFEAICCCMHEADERA  zfeaicccmheadera = new ZFEAICCCMHEADERA();
                    zfeaicccmheadera.setIDATE(idate);
                    zfeaicccmheadera.setBANK(bank);
                    zfeaicccmheadera.setKUNRG(list_obj.getDEALER_CODE());
                    zfeaicccmheadera.setNAME1(list_obj.getDEALER_NAME());
                    zfeaicccmheadera.setKLIMA(list_obj.getINI_LIMIT());
                    zfeaicccmheadera.setKUSEB(list_obj.getAVAIL_LIMIT());
                    zfeaicccmheadera.setKLIMB(list_obj.getUSED_LIMIT());
                    zfeaicccmheadera.setKLIMC(list_obj.getDEPOSIT_RATIO());
                    zfeaicccmheadera.setDATAB(DateUtil.stringToDate(list_obj.getLIMIT_EFFECT_DATE()));
                    zfeaicccmheadera.setDATBI(DateUtil.stringToDate(list_obj.getLIMIT_DUE_DATE()));
                    zfeaicccmheadera.setSTATUS(list_obj.getSTATUS());
                    zfeaicccmheadera.setAMOUNT(list_obj.getAMOUNT());
                    zfeaicccmheadera.setAMOUNT1(list_obj.getDEPOSIT_AMOUNT());
                    zfeaicccmheadera.setAMOUNT2(list_obj.getRANSOM_AMOUNT());
                    zfeaicccmheadera.setZRESERVE1(list_obj.getLIST_ATTRIBUTE1());
                    zfeaicccmheadera.setZRESERVE2(list_obj.getLIST_ATTRIBUTE2());
                    zfeaicccmheadera.setZRESERVE3(list_obj.getLIST_ATTRIBUTE3());
                    zfeaicccmheaderaList.add(zfeaicccmheadera);
                }
            }
        }catch (Exception e){
            e.printStackTrace();
        }
    }

    /**
     * 通过接收光大银行请求数据，数据转换，发请求到SAP
     * @param in
     * @return
     */
    public OZEAIIMPCCCMAGDResponse getResponseG397byIn(In in){
        URL wsdlURL = SZEAIIMPCCCMAGD.WSDL_LOCATION;
        OZEAIIMPCCCMAGDResponse  _oZEAIIMPCCCMAGD__return = null;
        SZEAIIMPCCCMAGD ss = new SZEAIIMPCCCMAGD(wsdlURL, SERVICE_NAME);
        SZEAIIMPCCCMAGDSoap port = ss.getSZEAIIMPCCCMAGDSoap1();

        {
            System.out.println("Invoking oZEAIIMPCCCMAGD...");
            //OZEAIIMPCCCMAGD _oZEAIIMPCCCMAGD_parameters = null;
            OZEAIIMPCCCMAGD _oZEAIIMPCCCMAGD_parameters = new OZEAIIMPCCCMAGD();
            List<ZFEAICCCMHEADERA> zfeaicccmheaderaList = new ArrayList<ZFEAICCCMHEADERA>();
                ZFEAICCCMHEADERA zfeaicccmheadera = new ZFEAICCCMHEADERA();
                setZfeaicccmheaderaByIn(in,zfeaicccmheaderaList);

            OZEAIIMPCCCMAGD.ZEAIIMPCCCMAGD zeaiimpcccmagd = new OZEAIIMPCCCMAGD.ZEAIIMPCCCMAGD();
            OZEAIIMPCCCMAGD.ZEAIIMPCCCMAGD.ITITEM ititem = new OZEAIIMPCCCMAGD.ZEAIIMPCCCMAGD.ITITEM ();
            ititem.item=zfeaicccmheaderaList;
            zeaiimpcccmagd.setITITEM(ititem);
            _oZEAIIMPCCCMAGD_parameters.setZEAIIMPCCCMAGD(zeaiimpcccmagd);
            System.out.println(_oZEAIIMPCCCMAGD_parameters);
            try {
                Client client = ClientProxy.getClient(port);
                client.getOutInterceptors().add(new AddSoapHeader());
                HTTPConduit http =(HTTPConduit) client.getConduit();
                HTTPClientPolicy httpClientPolicy = new HTTPClientPolicy();
                httpClientPolicy.setConnectionTimeout(Integer
                        .valueOf("30000"));
                httpClientPolicy.setReceiveTimeout(Integer
                        .valueOf("150000"));
                httpClientPolicy.setAllowChunking(false);
                http.setClient(httpClientPolicy);

                _oZEAIIMPCCCMAGD__return = port.oZEAIIMPCCCMAGD(_oZEAIIMPCCCMAGD_parameters);
                System.out.println("oZEAIIMPCCCMAGD.result=" + _oZEAIIMPCCCMAGD__return.toString());


            } catch (AdapterException e) {
                System.out.println("Expected exception: AdapterException has occurred.");
                System.out.println(e.toString());
            }
            return _oZEAIIMPCCCMAGD__return;
        }



    }



    public static void main(String args[]) throws Exception {
        SZEAIIMPCCCMAGDSoap_SZEAIIMPCCCMAGDSoap1_Client client  = new SZEAIIMPCCCMAGDSoap_SZEAIIMPCCCMAGDSoap1_Client();
        client.getResponseG397();

     /*   URL wsdlURL = SZEAIIMPCCCMAGD.WSDL_LOCATION;
        if (args.length > 0 && args[0] != null && !"".equals(args[0])) {
            File wsdlFile = new File(args[0]);
            try {
                if (wsdlFile.exists()) {
                    wsdlURL = wsdlFile.toURI().toURL();
                } else {
                    wsdlURL = new URL(args[0]);
                }
            } catch (MalformedURLException e) {
                e.printStackTrace();
            }
        }

       SZEAIIMPCCCMAGD ss = new SZEAIIMPCCCMAGD(wsdlURL, SERVICE_NAME);
       SZEAIIMPCCCMAGDSoap port = ss.getSZEAIIMPCCCMAGDSoap1();

        {
            System.out.println("Invoking oZEAIIMPCCCMAGD...");
            //OZEAIIMPCCCMAGD _oZEAIIMPCCCMAGD_parameters = null;
            OZEAIIMPCCCMAGD _oZEAIIMPCCCMAGD_parameters = new OZEAIIMPCCCMAGD();
            List<ZFEAICCCMHEADERA> zfeaicccmheaderaList = new ArrayList<ZFEAICCCMHEADERA>();
            for (int i = 0; i <3 ; i++) {
                ZFEAICCCMHEADERA zfeaicccmheadera = new ZFEAICCCMHEADERA();
                setZfeaicccmheadera(i,zfeaicccmheadera);
                zfeaicccmheaderaList.add(zfeaicccmheadera);
            }
            OZEAIIMPCCCMAGD.ZEAIIMPCCCMAGD zeaiimpcccmagd = new OZEAIIMPCCCMAGD.ZEAIIMPCCCMAGD();
            OZEAIIMPCCCMAGD.ZEAIIMPCCCMAGD.ITITEM ititem = new OZEAIIMPCCCMAGD.ZEAIIMPCCCMAGD.ITITEM ();
            ititem.item=zfeaicccmheaderaList;
            zeaiimpcccmagd.setITITEM(ititem);
            _oZEAIIMPCCCMAGD_parameters.setZEAIIMPCCCMAGD(zeaiimpcccmagd);
            System.out.println(_oZEAIIMPCCCMAGD_parameters);
            try {
             Client client = ClientProxy.getClient(port);
                client.getOutInterceptors().add(new AddSoapHeader());
                HTTPConduit http =(HTTPConduit) client.getConduit();
                HTTPClientPolicy httpClientPolicy = new HTTPClientPolicy();
                httpClientPolicy.setConnectionTimeout(Integer
                        .valueOf("30000"));
                httpClientPolicy.setReceiveTimeout(Integer
                        .valueOf("150000"));
                httpClientPolicy.setAllowChunking(false);
                http.setClient(httpClientPolicy);

                OZEAIIMPCCCMAGDResponse _oZEAIIMPCCCMAGD__return = port.oZEAIIMPCCCMAGD(_oZEAIIMPCCCMAGD_parameters);
                System.out.println("oZEAIIMPCCCMAGD.result=" + _oZEAIIMPCCCMAGD__return.toString());

            } catch (AdapterException e) {
                System.out.println("Expected exception: AdapterException has occurred.");
                System.out.println(e.toString());
            }

        }

        System.exit(0);*/
    }
}
